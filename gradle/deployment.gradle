import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}

signing
{
    sign configurations.archives
}
build.dependsOn.remove(signArchives)

uploadArchives
{
    doFirst {
        mkdir "file:/$rootDir/build/deploy"
    }
    repositories
    {
        mavenDeployer
        {
            beforeDeployment
            {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            // Hack: Deploy to a local repository first, then upload to Sonatype using scripts.
            repository(url: maven2_url) {
                // authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                repository(url: "file://localhost/$rootDir/build/deploy")
            }

            snapshotRepository(url: snapshot_url) {
                // authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                repository(url: "file://localhost/$rootDir/build/deploy")
            }

            pom.project
            {
                name project_name
                packaging 'jar'
                // optionally artifactId can be defined here
                description project_description
                url project_url

                scm {
                    connection project_scm
                    developerConnection project_scm
                    url project_url
                }

                licenses {
                    license {
                        name project_license_slug
                        url project_license_url
                    }
                }

                developers {
                    developer {
                        id project_developer
                        name project_developer
                    }
                }
            }
        }
    }
}

// Scripted hack, inpired from:
// https://github.com/h2oai/sparkling-water/tree/3f8fcf387a2bcc080343a8fafdc81aebc0d99fa1/gradle/publish
// and
// https://github.com/h2oai/sparkling-water/blob/73d2e2bd11ce35c6379f6961188fb2af1a7bc04b/build.gradle#L228
// Until either this one works for us: https://github.com/marcphilipp/nexus-publish-plugin
// or this issue is fixed another way:
// https://github.com/travis-ci/travis-ci/issues/9555
def createStagingId(def username, def password) {
    def proc = ['./createStagingId.sh', username, password].execute([], file("${rootDir.toString()}/gradle"))
    return proc.text
}

def uploadFiles(def username, def password, def repoDir, def stagingId) {
    def proc = ['./uploadToNexus.sh', username, password, repoDir, stagingId].execute([], file("${rootDir.toString()}/gradle"))
    proc.waitFor()
}

task publishToNexus(dependsOn: 'publish'){
    doLast {
        def stagingId = createStagingId(System.getenv('SONATYPE_USERNAME'), System.getenv('SONATYPE_PASSWORD')).replace('\n', '')
        println("my staging id: " + stagingId)
        uploadFiles(System.getenv('SONATYPE_USERNAME'), System.getenv('SONATYPE_PASSWORD'), "$rootDir/build/deploy", stagingId)
    }
}

{
  "CheckResourceLoader": {
    "scanUrls": [
      "org.openstreetmap.atlas.checks.validation"
    ],
    "type": "org.openstreetmap.atlas.checks.base.BaseCheck",
    "enabled.value.default": true
  },
  "PoolSizeCheck": {
    "surface": {
      "maximum": 1000.0,
      "minimum": 50.0
    }
  },
  "SpikyBuildingCheck": {
    "spiky.angle.maximum": 15.0,
    "curve": {
      "degrees": {
        "maximum.single_heading_change": 25.0,
        "minimum.total_heading_change": 10.0
      },
      "points.minimum": 4
    },
    "challenge": {
      "description": "Find poorly digitized buildings with sharp angles in their geometry",
      "blurb": "Fix buildings with spiky geometry",
      "instruction": "Open your favorite editor and validate that the buildings are mapped correctly",
      "difficulty": "NORMAL",
      "tags":"building"
    }
  },
  "OrphanNodeCheck": {

  },
  "AddressPointMatchCheck": {
    "bounds.size": 150.0,
    "challenge": {
      "description": "Tasks contain nodes which either have no street name or incorrect street names",
      "blurb": "Nodes without street names, or with incorrect street names",
      "instruction": "Open your favorite editor and edit the node street names",
      "difficulty": "EASY",
      "defaultPriority": "LOW"
    }
  },
  "AddressStreetNameCheck": {
    "bounds.size": 100.0,
    "challenge": {
      "description": "Tasks contain nodes with addr:street names that don't match the surrounding roads",
      "blurb": "Nodes with mismatched addr:street names",
      "instruction": "Open your favorite editor and edit the node street names",
      "difficulty": "HARD"
    }
  },
  "ApproximateWayCheck": {
    "deviation": {
      "minimum.meters": 10.0,
      "ratio": {
        "max": 0.12
      }
    },
    "angle": {
      "max": 140.0,
      "min": 60.0
    },
    "bezierStep": 0.01,
    "highway.minimum": "secondary",
    "challenge": {
      "description": "Tasks contain ways that are crudely drawn.",
      "blurb": "Crudely drawn ways",
      "instructions": "Improve the accuracy of the way by adding more nodes and/or readjusting existing nodes to better match the actual road",
      "difficulty": "EASY"
    }
  },
  "AreasWithHighwayTagCheck":{
    "tag.filters":"highway->*&area->yes",
    "challenge":{
      "description":"A Highway should never be tagged as an area, all these tasks involve highways that have been.",
      "blurb":"Highways should not be tagged as Areas.",
      "instruction":"Remove highway tag from feature with area tag.",
      "difficulty":"EASY",
      "tags":"highway,landuse"
    }
  },
  "BigNodeBadDataCheck": {
    "max.number.paths.threshold": 25,
    "max.number.junction.edges.threshold": 2,
    "highway.type": {
      "minimum": "toll_gantry",
      "maximum": "motorway"
    },
    "challenge": {
      "description": "Bad data in intersections can create BigNodes that have incredibly high numbers of paths.",
      "blurb": "Big Nodes with bad data have too many paths.",
      "instruction": "Open your favorite editor and edit the intersection.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      }
    }
  },
  "BuildingRoadIntersectionCheck": {
    "car.navigable": true,
    "challenge": {
      "description": "Tasks contain buildings which intersect with surrounding roads",
      "blurb": "Intersecting Buildings and Roads",
      "instruction": "Open your favorite editor and edit the buildings or roads to remove the intersection.",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule": {
        "condition":"OR",
        "rules":["highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"]
      },
      "tags":"building,highway"
    }
  },
  "ConcerningAngleBuildingCheck": {
    "angles": {
      "minLowAngleDiff": 80.0,
      "maxLowAngleDiff": 89.7,
      "minHighAngleDiff": 90.3,
      "maxHighAngleDiff": 100.0
    },
    "angleCounts": {
      "min": 4.0,
      "max": 16.0
    },
    "challenge": {
      "description": "Tasks contain buildings with angles that need to be squared.",
      "blurb": "Concerning angles in buildings",
      "instructions": "Adjust the building's angles to be right angles.",
      "difficulty": "EASY"
    }
  },
  "ConflictingAreaTagCombination": {
    "challenge": {
      "description": "Task contains Area's with mutually exclusive tag combinations.",
      "blurb": "Conflicting Area Tag Combination",
      "instruction": "Open your favorite editor, check the instruction and modify the tags that are considered conflicting",
      "difficulty": "EASY"
    }
  },
  "ConflictingTagCombinationCheck": {
    "tags.conflicting.filters": [
      "highway->*&building->*||route->ferry||natural->*||landuse->*||place->*",
      "service->*&highway->!service&highway->!construction&railway->!&waterway->!canal",
      "motor_vehicle->yes&motorcar->no",
      "motor_vehicle->no&motorcar->yes",
      "motor_vehicle->yes&vehicle->no",
      "motorcar->yes&vehicle->no",
      "motor_vehicle->no&vehicle->yes",
      "motorcar->no&vehicle->yes"
    ],
    "challenge": {
      "description": "OSM has numerous tag keys and values. These tags could be combined and used together in the same feature. However, tags might have conflicting values.",
      "blurb": "Verify conflicting tags.",
      "instruction": "Open your favorite editor, check the instruction for the task and then modify the tags that are considered conflicting.",
      "difficulty": "EASY"
    }
  },
  "ConnectivityCheck": {
    "nearby.edge.distance.meters": 2.0,
    "denylisted.highway.filter": "highway->no",
    "challenge": {
      "description": "Checks if a node should be connected to a nearby node or edge.",
      "blurb": "Connectivity Check",
      "instruction": "Open your favorite editor and check if the referenced node should be connected to a nearby node or edge.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "highway"
    }
  },
  "ConstructionCheck": {
    "oldConstructionDays": 730.0,
    "oldCheckDateMonths": 6.0,
    "challenge": {
      "description": "Tasks contain construction features where the expected completion date has passed, check_date is older than 6 months, has a construction tag with no dates and has not been modified for at least 2 years.",
      "blurb": "Old Construction",
      "instructions": "Correct the construction date or update the check_date or modify the feature to not be under construction.",
      "difficulty": "NORMAL"
    }
  },
  "DuplicateLocationInPolyLineCheck": {
    "challenge": {
      "description": "Tasks will include locations that have been repeated within a single polyline.",
      "blurb": "Repeating locations in a polyline",
      "instruction": "Open your favorite editor and remove the duplicate locations, so that only a single location remains.",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      }
    }
  },
  "DuplicateNodeCheck": {
    "challenge": {
      "description": "Tasks contain node locations that have duplicate nodes found.",
      "blurb": "Duplicate Nodes",
      "instruction": "Open your favorite editor and remove one or more of the duplicate nodes until only one remains.",
      "difficulty": "EASY"
    }
  },
  "DuplicatePointCheck": {
    "challenge": {
      "description": "Tasks contain node locations where duplicate points of interest are found.",
      "blurb": "Duplicate Points",
      "instruction": "Open your favorite editor and remove one or more of the duplicate points of interest until only one remains.",
      "difficulty": "EASY"
    }
  },
  "DuplicateWaysCheck": {
    "enabled": false,
    "challenge": {
      "description": "Tasks contain Ways which have been partially or completely duplicated.",
      "blurb": "Duplicate Ways",
      "instruction": "Open your favorite editor and remove the duplicated edges in the OSM way.",
      "difficulty": "EASY"
    }
  },
  "EdgeCrossingEdgeCheck": {
    "minimum.highway.type": "no",
    "challenge": {
      "description": "Tasks contain ways that do not have shared nodes but cross each other.",
      "blurb": "Crossing Ways",
      "instruction": "Open your favorite editor and connect the ways at the point of intersection.",
      "difficulty": "EASY"
    }
  },
  "FloatingEdgeCheck": {
    "highway.minimum": "service",
    "length": {
      "maximum.kilometers": 100.0,
      "minimum.meters": 100.0
    },
    "challenge": {
      "description": "Tasks contain ways that are disconnected from the road network.",
      "blurb": "Connected Edges",
      "instruction": "Open your favorite editor and remove disconnected edges.",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule": {
        "condition":"OR",
        "rules":["highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"]
      },
      "tags":"highway"
    }
  },
  "GeneralizedCoastlineCheck": {
    "node.minimum.distance": 100.0,
    "node.minimum.threshold": 30.0,
    "coastline.tags.filters": "",
    "angle.minimum.threshold": 97.0,
    "challenge": {
      "description": "Coastlines whose nodes are too far apart, and which may have too sharp of angles.",
      "blurb": "Ways",
      "instruction": "Open your favorite editor and add more nodes to the coastline to increase the resolution of the coastline's geometry.",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "tags":"coastline"
    }
  },
  "ImproperAndUnknownRoadNameCheck": {
    "names.improper": [
      "street",
      "express",
      "avenue",
      "drive"
    ],
    "challenge": {
      "description": "Tasks contain roads named as a road type, form of way, a road surface material or the string \"unknown\". These are common mistake in iD.",
      "blurb": "Incorrect road names",
      "instruction": "Open your favorite editor and edit/remove the incorrect names",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "highway"
    }
  },
  "InconsistentRoadClassificationCheck": {
    "long.edge.threshold": 1000.0,
    "minimum.highway.type": "tertiary_link",
    "maximum.direction.change.degrees": 30.0,
    "maximum.edge.length": 500.0,
    "challenge": {
      "description": "Tasks that identify roads, that transition from one classification to another and then back to the original classification. The initial way will be used as reference to find out inconsistency. This check will skip roundabouts by default. Roundabouts take the type of highest priority way connected. However, if a roundabout is not properly tagged (missing junction=roundabout), then it will probably be flagged by this check. The solution is to add junction=roundabout tag and set the highway tag to the highest priority highway tag connecting to junction. Links need to be tagged similar to roundabouts. By default a link way will not be used as reference way. However, link ways could still cause inconsistencies.",
      "blurb": "Classifications that transition back and forth over a road going in a direction.",
      "instruction": "Open your editor and change the classification that is inconsistent. If a roundabout is the cause of inconsistency, then tag it with junction=roundabout.",
      "difficulty": "HARD",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "highway"
    }
  },
  "IntersectingBuildingsCheck":
  {
    "intersection.lower.limit": 0.01,
    "challenge": {
      "description": "Buildings that intersect, contain, or overlap each other.",
      "blurb": "Intersecting Buildings",
      "instruction": "Correct intersecting buildings by moving them or dissolving one into another.",
      "difficulty": "NORMAL",
      "tags":"building"
    }
  },
  "InvalidAccessTagCheck":{
    "tags.filter":"public_transport->!yes&psv->!yes&bus->!yes&emergency->!yes&motor_vehicle->!no&vehicle->!no&motorcar->!no",
    "minimum.highway.type":"residential",
    "challenge": {
      "description": "Tasks containing invalid access tags",
      "blurb": "Invalid Access Tags",
      "instruction": "Correct the displayed invalid access=no tag.",
      "difficulty": "NORMAL",
      "tags":"access,highway"
    }
  },
  "InvalidGeometryCheck": {
    "challenge": {
      "description": "Tasks containing Ways with invalid geometries",
      "blurb": "Invalid Geometries",
      "instruction": "Correct the geometries of the displayed ways",
      "difficulty": "NORMAL",
      "tags":"geometry"
    }
  },
  "InvalidLanesTagCheck": {
    "lanes.filter": "lanes->1,1.5,2,3,4,5,6,7,8,9,10",
    "challenge":{
      "description":"Tasks contain invalid values for the lanes tag.",
      "blurb":"Invalid Lanes Tags",
      "instruction":"Change the lanes tag to have a valid and representative value.",
      "difficulty":"EASY",
      "tags":"lanes,highway"
    }
  },
  "InvalidMiniRoundaboutCheck": {
    "valence.minimum":6,
    "challenge":{
      "description":"Tasks containing invalid mini-roundabouts.",
      "blurb":"Invalid Mini-Roundabout Tags",
      "instruction":"Change the tags to represent the intersection more accurately.",
      "difficulty":"NORMAL"
    }
  },
  "InvalidMultiPolygonRelationCheck": {
    "members.one.ignore": true,
    "overlap.points.minimum": 0,
    "overlap.points.maximum": 300000,
    "challenge": {
      "description": "Tasks containing improperly formed multipolygon relations.",
      "blurb": "Invalid Multipolygon Relations",
      "instruction": "Open your favorite editor and fix the issues listed in the instructions for each multipolygon relation.",
      "difficulty": "HARD"
    }
  },
  "InvalidSignBoardRelationCheck": {
    "countries": [
      "RUS"
    ],
    "challenge": {
      "description": "Tasks containing signboard relations that are not properly formed.",
      "blurb": "Invalid Signboards",
      "instruction": "Open your favorite editor, and add/correct members of the specified signboard relation.",
      "difficulty": "Normal",
      "defaultPriority": "MEDIUM"
    }
  },
  "InvalidTagsCheck": {
    "filters.resource.override": false,
    "filters.classes.tags": [
      ["area","boundary->protected_area&protect_class->!"],
      ["relation","boundary->protected_area&protect_class->!"],
      ["edge","highway->motorway,trunk,primary,secondary,tertiary,unclassified,residential,service,motorway_link,trunk_link,primary_link,secondary_link,tertiary_link,living_street,track&junction->roundabout&area->*"],
      ["node","highway->emergency_access_point&ref->!", "The element is an emergency_access_point with no ref tag."]
    ],
    "challenge": {
      "description": "Tasks containing features with tags containing missing, conflicting, incorrect or illegal values",
      "blurb": "Features with invalid tags",
      "instruction": "Open your favorite editor and check that the listed tags are correct.",
      "difficulty": "Medium",
      "tags":"tags"
    }
  },
  "SourceMaxspeedCheck": {
    "countries.denylist": ["UK"],
    "values": [
      "sign",
      "markings"
    ],
    "context.values": [
      "urban",
      "rural",
      "bicycle_road",
      "trunk",
      "motorway",
      "living_street",
      "school",
      "pedestrian_zone",
      "urban_motorway",
      "urban_trunk",
      "nsl",
      "express",
      "nsl_restricted",
      "nsl_dual",
      "nsl_single",
      "zone"
    ],
    "country.exceptions": [
      "BE-VLG",
      "BE-WAL",
      "BE-BRU"
    ],
    "challenge": {
      "description": "Tasks containing features with tag source:maxspeed with incorrect value format.",
      "blurb": "Features with invalid source:maxspeed tags",
      "instruction": "Open your favorite editor and check that the listed tags are correct.",
      "difficulty": "NORMAL",
      "tags":"tags"
    }
  },
  "InvalidTurnRestrictionCheck": {
    "challenge": {
      "description": "Tasks containing invalid turn restrictions",
      "blurb": "Invalid Turn Restrictions",
      "instruction": "Correct the displayed invalid turn restriction",
      "difficulty": "HARD",
      "tags":"highway"
    }
  },
  "LevelCrossingOnRailwayCheck": {
    "layer.default": 0,
    "railway.filter": "railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge",
    "challenge": {
      "description": "Tasks contain features which are missing or incorrectly tagged as railway:level_crossing.",
      "blurb": "Fix level crossing railway/highway intersections",
      "instruction": "Open your favorite editor and fix the railway/highway intersection nodes.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW"
    }
  },
  "LineCrossingBuildingCheck": {
    "challenge": {
      "description": "The water body has invalid crossings by line item(s).",
      "blurb": "Unless line item is a certain type that can cross water bodies, then it should not cross them.",
      "instruction": "Open the task in your favorite editor and fix the issue with invalid crossing.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "building"
    }
  },
  "LineCrossingWaterBodyCheck": {
    "highway.minimum": "path",
    "highways.exclude": ["bus_guideway"],
    "lineItems.offending": "railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature",
    "lineItems.non_offending": "waterway->*|boundary->*|landuse->*|bridge->yes,viaduct,aqueduct,boardwalk,covered,low_water_crossing,movable,suspension|tunnel->yes,culvert,building_passage|embankment->yes|location->underwater,underground|power->line,minor_line|man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|winter_road->yes|snowmobile->yes|ski->yes|ford->!no&ford->*",
    "nodes.intersecting.non_offending": "ferry->!no&ferry->*|ford->!no&ford->*|leisure->slipway|amenity->ferry_terminal",
    "buildings.flag": true,
    "challenge": {
      "description": "Certain OSM features should not cross waterbodies.",
      "blurb": "Edit features overlapping the waterbody so they either validly overlap or do not overlap.",
      "instruction": "Edit the features overlapping the waterbody so they either validly overlap or do not overlap.",
      "difficulty": "EASY",
      "defaultPriority": "MEDIUM",
      "lowPriorityRule": {
        "condition": "OR",
        "rules": ["intermittent=yes"]
      }
    },
    "shapepoints.min": 1,
    "shapepoints.max": 5000
  },
  "LongNameCheck": {
    "tags.filter": "natural->spring,hot_spring&&name->*||natural->water,lake,pond,reservoir,stream,tidalflat,reedbed,lagoon||water:type->lake||water->lake,pond,oxbow,salt_lake,tidalflat,reedbed,water,Perennial,reservoir,canal,river,lock,moat,riverbank,creek,stream,stream_pool,lagoon||water->drain&&name->*||water->dam,Dam&&natural->water||landuse->pond,reservoir,water||seamark:type->dam&&natural->water||waterway->river,riverbank,brook,ditch,stream,creek,canal,derelict_canal||stream->*||waterway->drain&&name->*||waterway->water,lagoon||wetland->tidalflat,reedbed||natural->lake||||water->lake&&&intermittent->dry||||seasonal->dry||||natural->dry_lake&natural->*&&natural->!dock&&&natural->!water_point&&&natural->!floodway&&&natural->!spillway&&&natural->!wastewater&&&natural->!waterhole||waterway->*&&waterway->!lock_gate&&&waterway->!dock&&&waterway->!water_point&&&waterway->!floodway&&&waterway->!spillway&&&waterway->!wastewater&&&waterway->!waterhole&&&waterway->!culvert&&&waterway->!dam&&&waterway->!waterfall&&&waterway->!fish_pass&&&waterway->!dry_dock&&&waterway->!construction&&&waterway->!boat_lift&&&waterway->!weir&&&waterway->!breakwater&&&waterway->!boatyard||water->*&&water->!lock_gate&&&water->!dock&&&water->!water_point&&&water->!floodway&&&water->!spillway&&&water->!wastewater&&&water->!waterhole&&&water->!pool&&&water->!reflecting_pool&&&water->!swimming_pool&&&water->!salt_pool&&&water->!fountain&&&water->!tank&&&water->!fish_pass||tunnel->*&&tunnel->!culvert||waterway->*&&waterway->!drain&&name->!||water->*&&water->!drain&&name->!||wetland->*&&seasonal->yes&&wetland->!tidalflat&&&wetland->!reedbed||water->*&&seasonal->yes&&water->!tidalflat&&&water->!reedbed||natural->*&&seasonal->yes&&natural->!tidalflat&&&natural->!reedbed",
    "name.max": 40,
    "challenge": {
      "description": "Tasks containing features with unusually long names.",
      "blurb": "Unusually long names.",
      "instruction": "Open your favorite editor and validate that the marked names of the features are correct.",
      "difficulty": "EASY"
    }
  },
  "LongSegmentCheck": {
    "length.minimum.kilometers": 10.0,
    "challenge": {
      "description": "A long segment is a segment that is more than 10 kilometers long. Very long segments may not represent actual roads.",
      "blurb": "Very long segments may not represent actual roads.",
      "instruction": "Open your favorite editor and check if the segment should be split into smaller segments or removed.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "highway"
    }
  },
  "MalformedPolyLineCheck": {
    "challenge": {
      "description": "Tasks containing lines that have only one point, or none, and the ones that are too long or too short. A line is considered too long if it is longer than 500km and too short if is shorter than 1m. Coastlines and Rivers are excluded.",
      "blurb": "Polylines that are malformed.",
      "instruction": "Open your favorite editor, remove unnecessary nodes if required. Split way into multiple ways so that the way is not too long, or increase the length of a way if it is less than 1m.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "highway"
    }
  },
  "MalformedRoundaboutCheck" : {
    "angle.threshold.maximum_degree": 60.0,
    "min.nodes": 9.0,
    "traffic.countries.left":["AIA", "ATG", "AUS", "BGD", "BHS", "BMU", "BRB", "BRN", "BTN", "BWA",
      "CCK", "COK", "CXR", "CYM", "CYP", "DMA", "FJI", "FLK", "GBR", "GGY", "GRD",
      "GUY", "HKG", "IDN", "IMN", "IND", "IRL", "JAM", "JEY", "JPN", "KEN", "KIR",
      "KNA", "LCA", "LKA", "LSO", "MAC", "MDV", "MLT", "MOZ", "MSR", "MUS", "MWI",
      "MYS", "NAM", "NFK", "NIU", "NPL", "NRU", "NZL", "PAK", "PCN", "PNG", "SGP",
      "SGS", "SHN", "SLB", "SUR", "SWZ", "SYC", "TCA", "THA", "TKL", "TLS", "TON",
      "TTO", "TUV", "TZA", "UGA", "VCT", "VGB", "VIR", "WSM", "ZAF", "ZMB", "ZWE"],
    "challenge": {
      "description": "Tasks contain roundabouts that are malformed.",
      "blurb": "Malformed roundabouts",
      "instruction": "Open your favorite editor and fix the roundabout's geometry.",
      "difficulty": "MEDIUM"
    }
  },
  "MixedCaseNameCheck": {
    "check_name.countries":["AIA", "ATG", "AUS", "BHS", "BRB", "BLZ", "BMU", "BWA", "VGB",
      "CMR", "CAN", "CYM", "DMA", "FJI", "GMB", "GHA", "GIB", "GRD", "GUY", "IRL", "JAM",
      "KEN", "LSO", "MWI", "MLT", "MUS", "MSR", "NAM", "NZL", "NGA", "PNG", "SYC", "SLE",
      "SGP", "SLB", "ZAF", "SWZ", "TZA", "TON", "TTO", "TCA", "UGA", "GBR", "USA", "VUT",
      "ZMB", "ZWE"],
    "name":{
      "language.keys":["name:en"],
      "affixes":["Mc", "Mac", "Mck","Mhic", "Mic"],
      "articles": ["a", "an", "the"],
      "prepositions": ["and", "from", "to", "of", "by", "upon", "on", "off", "at", "as",
        "into", "like", "near", "onto", "per", "till", "up", "via", "with", "for", "in"],
      "units":["kv"]
    },
    "regex.split":" -/&@–",
    "challenge": {
      "description": "Tasks containing objects with mixed case names.",
      "blurb": "Mixed Case Name",
      "instruction": "Correct the listed names tags so they conform to capitalization standards",
      "difficulty": "MEDIUM"
    }
  },
  "MissingRelationTypeCheck": {
    "ignore.tags.filter":"disused:type->!&disabled:type->!",
    "challenge": {
      "description": "Tasks contain Relations with missing type tag.",
      "blurb": "Relations with missing type tag.",
      "instruction": "Open your favorite editor and add Relation type tag.",
      "difficulty": "NORMAL"
    }
  },
  "NodeValenceCheck": {
    "connections.maximum": 10,
    "challenge": {
      "description": "Tasks with nodes are not connected to too many edges. It is considered to have too many edges if it contains more than 10 connections.",
      "blurb": "Nodes with too many edges.",
      "instruction": "Open your favorite editor and disconnect edges to the node.",
      "difficulty": "EXPERT"
    }
  },
  "OneMemberRelationCheck": {
    "tags.filter": "type->!person&type->!multipolygon",
    "challenge": {
      "description": "Tasks containing relations with only one member.",
      "blurb": "One Member Relations",
      "instruction": "Correct the relation to add necessary members",
      "difficulty": "HARD"
    }
  },
  "OpenBoundaryCheck": {
    "challenge": {
      "description": "Admin boundaries should be closed polygons. This check catches admin boundaries that are not closed..",
      "blurb": "Open Boundary Check",
      "instruction": "Please close the boundary",
      "difficulty": "MEDIUM"
    }
  },
  "OverlappingAOIPolygonCheck":{
    "aoi.tags.filters": ["amenity->FESTIVAL_GROUNDS", "amenity->GRAVE_YARD|landuse->CEMETERY",
      "boundary->NATIONAL_PARK,PROTECTED_AREA|leisure->NATURE_RESERVE,PARK",
      "historic->BATTLEFIELD", "landuse->FOREST|natural->WOOD",
      "landuse->RECREATION_GROUND|leisure->RECREATION_GROUND",
      "landuse->VILLAGE_GREEN|leisure->PARK", "leisure->GARDEN",
      "leisure->GOLF_COURSE|sport->GOLF", "leisure->PARK&name->*", "natural->BEACH",
      "tourism->ZOO"],
    "intersect.minimum.limit":0.01,
    "challenge": {
      "description": "Tasks containing overlapping AOI ways",
      "blurb": "Overlapping AOI Polygon",
      "instruction": "Correct the areas as necessary to not have overlapping ways representing the same AOI",
      "difficulty": "HARD"
    }
  },
  "OverlappingEdgeCheck": {
    "highway.priority.minimum": "residential",
    "pedestrian.areas.filter": true,
    "challenge": {
      "description": "Tasks will include highways that are overlapped by another highway.",
      "blurb": "Overlapping Highways",
      "instruction": "Open your favorite editor and either remove the overlap way segment or correct tagging so that only a single highway remains.",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      }
    }
  },
  "RoadLinkCheck": {
    "length.maximum.miles": 1.0,
    "challenge": {
      "description": "Verify that one end or the other is a fork to/from a road of the same class, that is not a _link",
      "blurb": "Check for invalid classes in connected ways.",
      "instruction": "Open your favorite editor and check that the connected ways are either of the same class or a link. If not modify the connected ways class to either the same class or a link.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "highway"
    }
  },
  "RoadNameGapCheck": {
    "valid.highway.tag": ["primary","secondary","tertiary","trunk","motorway"],
    "challenge": {
      "description": "identifies Edges with no name Tag that are between two other Edges with the same name Tag, OR the Edge has a name Tag but does not equal the name Tag of the Edges that it is between.",
      "blurb": "Flag the Edge with different name tag or no name tag which is between the same name tag edges",
      "instruction": "Open your favorite editor and edit or add the name tag of the flagged edge(s) so they're consistent with connecting edges with same name tag.",
      "difficulty": "EASY",
      "tags":"highway"
    }
  },
  "RoadNameSpellingConsistencyCheck": {
    "distance.search.maximum": 500.0,
    "challenge": {
      "description": "Segments of a given road should all have the same, correct spelling.",
      "blurb": "Edit the name tags of flagged road segments so they're consistent with one another.",
      "instruction": "Open your favorite editor and edit the name tags of the flagged way(s) so they're consistent with those of other ways of the same road.",
      "difficulty": "EASY"
    }
  },
  "RoundaboutClosedLoopCheck": {
    "challenge": {
      "description": "A roundabout should be formed by one-way edges with no dead-end nodes.",
      "blurb": "Modify roundabouts such that they are well formed.",
      "instruction": "Open your favorite editor and fix the issue with the roundabout.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule": {
        "condition":"OR",
        "rules":["highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"]
      },
      "tags":"highway"
    }
  },
  "RoundaboutConnectorCheck": {
    "minimum.highway.type": "service",
    "threshold": {
      "one_way": 100.0,
      "two_way": 130.0
    },
    "challenge": {
      "description": "Roads connected to roundabouts at too sharp an angle.",
      "blurb": "Sharp intersections between roundabouts and connecting roads are often digitization/navigation errors. Adjust these intersections to create smoother transitions in and out of roundabouts.",
      "instruction": "Open your favorite editor and edit the flagged ways and/or the surrounding network to make smooth connection from the connector to the roundabout.",
      "difficulty": "HARD",
      "tags": "highway,junction,roundabout"
    }
  },
  "RoundaboutValenceCheck": {
    "connections.minimum": 2.0,
    "challenge": {
      "description": "Verify that the valence of the roundabout is sensible.",
      "blurb": "Modify Polyline intersections with the roundabout edges",
      "instruction": "Open your favorite editor and move modify polyline intersections with the roundabout.",
      "difficulty": "NORMAL"
    }
  },
  "RoundaboutMissingTagCheck": {
    "ignore.tags.filter":"motor_vehicle->!no&foot->!yes&footway->!&access->!private&construction->!",
    "turning.circle.length.threshold": 4,
    "angle.threshold": {
      "maximum_degree": 40.0,
      "minimum_degree": 10.0
    },
    "challenge": {
      "description": "This check is to look for suspicious circular junctions that may be roundabout without the “junction=roundabout” tag.",
      "blurb": "Modify roundabouts such that they have proper tagging.",
      "instruction": "Open your favorite editor and add junction=roundabout tag.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "tags":"highway"
    }
  },
  "SelfIntersectingPolylineCheck": {
    "tags.filter":"highway->*&highway->!construction&highway->!footway&highway->!path|building->*",
    "minimum.highway.type":"service",
    "challenge": {
      "description": "Verify that the same Polyline does not intersect itself at any point.",
      "blurb": "Modify Polylines such that they do not self intersect.",
      "instruction": "Open your favorite editor and move the polylines such that they are not self intersecting anymore.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule": {
        "condition":"OR",
        "rules":["highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"]
      },
      "tags":"highway"
    }
  },
  "ShadowDetectionCheck": {
    "challenge": {
      "description": "Verify the height and level tags to make sure the building does not float in 3D",
      "blurb": "Fix floating buildings",
      "instruction": "Open your favorite editor and check the height and placement of the building or building part for 3D alignment.",
      "difficulty": "NORMAL"
    }
  },
  "SharpAngleCheck": {
    "threshold.degrees": 97.0,
    "challenge": {
      "description": "Each task has edges that have an angle that is too sharp within their polyline. Sharp angles may indicate inaccurate digitization once this threshold is exceeded. There may be other factors in play here such as number of intersections, type of highway, etc. But the main breaking point is any angles that are less than 31.",
      "blurb": "Modify angles that are too acute for possible inaccurate digitization.",
      "instruction": "Modify angles between two edges in polylines that are less than 31.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule": {
        "condition":"OR",
        "rules":["highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"]
      },
      "tags":"highway"
    }
  },
  "ShortNameCheck": {
    "non.latin.countries":["AFG",
      "ARE", "ARM", "BGD", "BGR", "BHR", "BIH", "BLR", "BRN", "BTN", "CHN", "COM", "CYP",
      "DJI", "DZA", "EGY", "ERI", "ESH", "ETH", "GEO", "GRC", "HKG", "IND", "IRN", "IRQ",
      "ISR", "JOR", "JPN", "KAZ", "KGZ", "KHM", "KOR", "KWT", "LAO", "LBN", "LBY", "LKA",
      "MAC", "MAR", "MDA", "MDV", "MKD", "MMR", "MNE", "MNG", "MRT", "MYS", "NPL", "OMN",
      "PAK", "PRK", "PSE", "QAT", "RUS", "SAU", "SDN", "SGP", "SOM", "SRB", "SYR", "TCD",
      "THA", "TJK", "TUN", "TWN", "TZA", "UKR", "YEM"],
    "length.maximum": 2,
    "non.latin.length.maximum": 1
  },
  "ShortSegmentCheck": {
    "edge.length.maximum.meters": 1.0,
    "node.valence.minimum": 3,
    "highway.priority.minimum": "service",
    "challenge": {
      "description": "A short segment is a segment that is less than 1 meter. A short segment should not be dead-end. Also a short segment with 2 connections should be investigated to see if segment is really needed.",
      "blurb": "Segments with less 1 meter length should not be dead end.",
      "instruction": "Open your favorite editor and fix the issue with the short segment.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      }
    }
  },
  "SignPostCheck": {
    "link":{
      "length.minimum.meters": 50.0,
      "link.branch.check": true
    },
    "source.filter": "highway->motorway,trunk",
    "ramp.filter":"highway->motorway_link,trunk_link",
    "destination_tag.filter":"destination->*|destination:ref->*|destination:street->*|destination:backward->*|destination:forwards->*",
    "challenge": {
      "description": "Tasks contain nodes where sign post tagging could be missing.  In particular it looks for motorway and trunk ways which have a link edge exiting them.  A task is generated if either the connecting node is missing the motorway_junction tag or the exiting segment is missing the destination tag.",
      "blurb": "Missing sign post tags",
      "instruction": "Either add the missing motorway_junction tag to the identified node and / or the destination tag to the exiting link segment.",
      "difficulty": "NORMAL",
      "defaultPriority": "MEDIUM",
      "tags":"highway"
    }
  },
  "SimilarTagValueCheck": {
    "filter": {
      "commonSimilars": [
        ["american", "mexican"], ["cafe", "cake"], ["male", "female"], ["woman", "man"],
        ["women", "men"], ["male_toilet", "female_toilet"], ["radiology", "cardiology"],
        ["baseball", "basketball"], ["bowls", "boules"], ["padel", "paddel"], ["formal", "informal"],
        ["hotel", "hostel"], ["hump", "bump"], ["seed", "feed"]
      ],
      "tags": [
        "asset_ref", "collection_times", "except", "is_in", "junction:ref", "maxspeed:conditional",
        "old_name", "old_ref", "opening_hours", "ref", "restriction_hours", "route_ref", "supervised",
        "source_ref", "target", "telescope"
      ],
      "tagsWithSubCategories": [
        "addr", "alt_name", "destination", "name", "seamark", "turn"
      ]
    },
    "similarity.threshold": {
      "min": 0.0,
      "max": 1.0
    },
    "value.length.min": 4.0,
    "challenge": {
      "description": "Tasks identify duplicate/similar values in tags.",
      "blurb": "Duplicate/Similar tag values.",
      "instruction": "Determine if the duplicate/similar value is necessary or can be removed.",
      "difficulty": "EASY"
    }
  },
  "SingleSegmentMotorwayCheck": {
    "challenge": {
      "description": "Tasks that identify ways tagged with highway=motorway that are not connected to any ways tagged the same.",
      "blurb": "Fix disconnected motorways.",
      "instruction": "Open your favorite editor and check whether the way should be tagged as highway=motorway.",
      "difficulty": "NORMAL"
    }
  },
  "SinkIslandCheck": {
    "tree.size": 50,
    "minimum.highway.type": "service",
    "filter.pedestrian.network": false,
    "challenge": {
      "description": "Tasks that identify islands of roads where it is impossible to get out. The simplest is a one-way that dead-ends; that would be a one-edge island.",
      "blurb": "Identify islands of roads.",
      "instruction": "Open your favorite editor and apply tags (if need to change one way roads), or update roads to remove any islands of roads",
      "difficulty": "EASY",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition":"OR",
        "rules":["highway=motorway","highway=motorway_link","highway=trunk","highway=trunk_link"]
      },
      "mediumPriorityRule": {
        "condition":"OR",
        "rules":["highway=primary","highway=primary_link","highway=secondary","highway=secondary_link"]
      },
      "tags":"highway"
    }
  },
  "StreetNameIntegersOnlyCheck": {
    "name.keys.filter":["name","name:left","name:right"],
    "character.single.ignore": true,
    "challenge": {
      "description": "Tasks containing name tags with only integers",
      "blurb": "Street Names Integers Only",
      "instruction": "Correct the road with only integers for names.",
      "difficulty": "Medium",
      "tags":"highway,name"
    }
  },
  "SnakeRoadCheck": {
    "challenge": {
      "description": "Tasks will include ways that are drawn as a single way, when in reality they should be two or more distinct ways",
      "blurb": "Snake Roads",
      "instruction": "Open your favorite editor and split the snake road into two or more distinct ways. You can do this by splitting or separating the existing way at an intersection or where you think a road should end. This check also flags roundabouts that aren’t properly tagged. If you see that’s the case - add a junction=roundabout tag when needed.",
      "difficulty": "MEDIUM",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      },
      "tags": "highway"
    }
  },
  "SuddenHighwayTypeChangeCheck":{
    "challenge": {
      "description": "Identifies ways that have suspicious highway tag jumps.",
      "blurb": "Sudden Highway Type Change",
      "instruction": "Check if way has suspicious highway jump and make necessary adjust to tag.",
      "difficulty": "MEDIUM",
      "defaultPriority": "LOW"
    },
    "minHighwayType": "tertiary"
  },
  "TollValidationCheck": {
    "minimumHighwayType": "tertiary",
    "maxAngleDiffForContiguousWays": 40.0,
    "minInAndOutEdges": 1.0,
    "maxIterationForNearbySearch": 15.0,
    "challenge": {
      "description": "Toll tags might be incorrect since tolls could possibly be avoided",
      "blurb": "Toll Escape",
      "instruction": "Please see instructions per feature for actions to take."
    }
  },
  "UnknownHighwayTagCheck": {
    "challenge": {
      "description": "highway tag is unknown and needs to be fixed.",
      "blurb": "unknown highway tags.",
      "instruction": "please change the highway tag to a known tag.",
      "difficulty": "EASY"
    }
  },
  "UnusualLayerTagsCheck": {
    "challenge": {
      "description": "Tunnels (negative), junctions (zero) and bridges (zero or positive) should have meaningful layer tags attached to them. A missing layer tag implies layer value 0. If there is an explicit layer tag, then it must be between -5 and 5.",
      "blurb": "Verify unusual layer tags.",
      "instruction": "Open your favorite editor, check the instruction for the task and then modify the tag that is considered unusual or possibly invalid.",
      "difficulty": "EASY"
    }
  },
  "UnwalkableWaysCheck": {
    "countries": [
      "SGP"
    ],
    "includeDualCrossingDualCarriageways": false,
    "challenge": {
      "description": "Intersections with dual carriageways can cause foot traffic routing issues.",
      "blurb": "Should be marked foot=yes or foot=no",
      "instruction": "Should be marked as foot=yes or foot=no",
      "difficulty": "EASY"
    }
  },
  "ValenceOneImportantRoadCheck": {
    "challenge": {
      "description": "Tasks containing high classification roads that start and/or end disconnected from the surrounding road network.",
      "blurb": "Valence-1 Important Road",
      "instruction": "Open your favorite editor and add/correct connecting ways to continue the highway, add/correct a corresponding link to connect the highway to a different class road network, or reverse digitization to correct one-way direction.",
      "difficulty": "Normal",
      "defaultPriority": "LOW",
      "highPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=motorway",
          "highway=motorway_link",
          "highway=trunk",
          "highway=trunk_link"
        ]
      },
      "mediumPriorityRule": {
        "condition": "OR",
        "rules": [
          "highway=primary",
          "highway=primary_link",
          "highway=secondary",
          "highway=secondary_link"
        ]
      }
    }
  },
  "WaterbodyAndIslandSizeCheck": {
    "surface":{
      "waterbody.minimum.meters": 10.0,
      "waterbody.maximum.kilometers": 370000.0,
      "island.minimum.meters": 10.0,
      "island.maximum.kilometers": 2170000.0,
      "islet.minimum.meters": 10.0,
      "islet.maximum.kilometers": 1.0
    },
    "challenge": {
      "description": "This tasks contains waterboadies and islands which are either too small or too large in size.",
      "blurb": "Waterbodies and Islands that are too large, or too small",
      "instruction": "Open your favorite editor and examine if the waterbody or island is correctly tagged and mapped.",
      "difficulty": "NORMAL",
      "defaultPriority": "MEDIUM"
    }
  },
  "HighwayToFerryTagCheck": {
    "highway.type.minimum": "path",
    "challenge": {
      "description": "Ferry routes should have a Ferry Tag with a highway classification associated with them. Any ferry routes with a Highway Tag should be updated to a Ferry Tag and the Highway Tag should be dropped. ",
      "blurb": "Improper tags for Ferry routes.",
      "instruction": "Open your favorite editor and check the instruction for the task and then create or modify the Ferry Tag and delete the Highway Tag.",
      "difficulty": "EASY",
      "defaultPriority": "MEDIUM"
    }
  },
  "PedestrianAreaOverlappingEdgeCheck": {
    "distance.minimum.meters": 1.0,
    "challenge": {
      "description": "Tasks contain pedestrian areas overlapping car navigable ways that are not properly snapped to those ways.",
      "blurb": "Pedestrian areas overlapping car navigable ways.",
      "instruction": "Open your favorite editor and check the instruction for the task and then properly snap all points of intersection of the pedestrian area to the overlapping car navigable ways.",
      "difficulty": "MEDIUM",
      "defaultPriority": "MEDIUM"
    }
  },
  "InvalidPiersCheck": {
    "highway.type.minimum": {
      "overlapping": "toll_gantry",
      "pier": "toll_gantry"
    },
    "challenge": {
      "description": "Piers should have polygon geometry and tags man_made=pier and area=yes",
      "blurb": "Verify invalid piers.",
      "instruction": "Open your favorite editor and check the instruction for the task to either update the geometry of the way to be a polygon or add area=yes tag or both.",
      "difficulty": "MEDIUM",
      "defaultPriority": "MEDIUM"
    }
  },
  "AtGradeSignPostCheck": {
    "connected.highway.types": {
      "primary": ["trunk","primary","secondary"],
      "trunk": ["primary"],
      "secondary": ["primary"]
    },
    "challenge":{
      "description":"This tasks contains at-grade intersections that are not part of destination_sign relations.",
      "blurb":"Add/Fix destination_sign relations to at-grade intersections",
      "instruction":"Open your favorite editor and check the instruction fr the task and add a destination_sign relation or destination_sign tag to the at-grade intersection.",
      "difficulty":"NORMAL",
      "defaultPriority":"MEDIUM"
    }
  },
  "OceanBleedingCheck": {
    "ocean": {
      "valid": "natural->strait,channel,fjord,sound,bay|harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock",
      "invalid": "man_made->breakwater,pier|natural->beach,marsh,swamp|water->marsh|wetland->bog,fen,mangrove,marsh,saltern,saltmarsh,string_bog,swamp,wet_meadow|landuse->*",
      "boundary": "natural->coastline"
    },
    "highway": {
      "minimum": "path",
      "exclude": [
        "bus_guideway"
      ]
    },
    "lineItems.offending": "railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature",
    "challenge": {
      "description": "Certain OSM features should not bleed into (intersect) oceans.",
      "blurb": "Edit features overlapping the ocean feature so they either validly intersect or do not overlap.",
      "instruction": "Open your favorite editor and edit the features overlapping the ocean so they either validly overlap or do not overlap.",
      "difficulty": "EASY"
    }
  },
  "ConditionalRestrictionCheck": {
    "challenge": {
      "description": "The conditional restriction tag and value should follow a predefined scheme",
      "blurb": "Improper conditional restriction tags",
      "instruction": "Open your favorite editor and check the instruction for the task and then update the conditional tag to the appropriate scheme.",
      "difficulty": "EASY",
      "defaultPriority": "MEDIUM"
    }
  },
  "BridgeDetailedInfoCheck": {
    "bridge.length.minimum.meters": 500.0,
    "challenge": {
      "description": "Bridge is long enough to deserve a more detailed description than just bridge=yes",
      "blurb": "Bridge without structure",
      "instruction": "Open your favorite editor and add a more specific 'bridge=*' or 'bridge:structure=*' tag.",
      "difficulty": "EASY",
      "defaultPriority": "LOW"
    }
  },
  "WaterAreaCheck": {
    "intersect.minimum.limit": 0.01,
    "water.tags.crossing.ignore": [
      "waterway->dam"
    ],
    "water.tags.filters": [
      "natural->water&water->*|waterway->riverbank"
    ],
    "water.tags.filtersrequireswaterway": [
      "natural->water&water->river,stream_pool,canal,lock|waterway->riverbank"
    ],
    "waterway.tags.filters": [
      "waterway->*"
    ],
    "challenge": {
      "description": "Overlapping waterway areas",
      "blurb": "Edit overlapping waterway features so they either validly intersect or do not overlap.",
      "instruction": "Open your favorite editor and edit the features overlapping the ocean so they either validly overlap or do not overlap.",
      "difficulty": "MEDIUM"
    }
  },
  "WaterWayCheck": {
    "ocean": {
      "boundary": "natural->coastline",
      "valid": "natural->strait,channel,fjord,sound,bay|harbour->*&harbour->!no|estuary->*&estuary->!no|bay->*&bay->!no|place->sea|seamark:type->harbour,harbour_basin,sea_area|water->bay,cove,harbour|waterway->artificial,dock"
    },
    "waterway": {
      "elevation": {
        "distance.min.start.end": 450.0,
        "resolution.min.uphill": 1.0
      },
      "sink.tags.filters": "natural->sinkhole|waterway->tidal_channel,drain|manhole->drain",
      "tags.filters": "waterway->river,stream,tidal_channel,canal,drain,ditch,pressurised"
    },
    "challenge": {
      "description": "Waterways that have circular flows, are crossing, do not have a sink, or are going uphill (if elevation data was provided)",
      "blurb": "Fix waterways such that they make physical sense",
      "instruction": "Open your favorite editor and edit the waterways",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW"
    }
  },
  "TunnelBridgeHeightLimitCheck": {
    "highway.filter":"highway->motorway_link,trunk_link,primary,primary_link,secondary,secondary_link",
    "challenge": {
      "description": "Tunnels, covered roads and roads crossing with bridges should have a 'maxheight' or 'maxheight:physical' tags.",
      "blurb": "Missing maxheight tag",
      "instruction": "Open your favorite editor and check the instruction for the task instructions, then add missing tags to each of the flagged ways.",
      "difficulty": "NORMAL",
      "defaultPriority": "LOW"
    }
  },
  "ElevationUtilities": {
    "elevation.srtm_extent": 1.0,
    "elevation.srtm_ext": "hgt.zip",
    "elevation.path": "elevation"
  },
  "InvalidCharacterNameTagCheck": {
    "tags.filter":"natural->spring,hot_spring&&name->*||natural->water,lake,pond,reservoir,stream,tidalflat,reedbed,lagoon||water:type->lake||water->lake,pond,oxbow,salt_lake,tidalflat,reedbed,water,Perennial,reservoir,canal,river,lock,moat,riverbank,creek,stream,stream_pool,lagoon||water->drain&&name->*||water->dam,Dam&&natural->water||landuse->pond,reservoir,water||seamark:type->dam&&natural->water||waterway->river,riverbank,brook,ditch,stream,creek,canal,derelict_canal||stream->*||waterway->drain&&name->*||waterway->water,lagoon||wetland->tidalflat,reedbed||natural->lake||||water->lake&&&intermittent->dry||||seasonal->dry||||natural->dry_lake&natural->*&&natural->!dock&&&natural->!water_point&&&natural->!floodway&&&natural->!spillway&&&natural->!wastewater&&&natural->!waterhole||waterway->*&&waterway->!lock_gate&&&waterway->!dock&&&waterway->!water_point&&&waterway->!floodway&&&waterway->!spillway&&&waterway->!wastewater&&&waterway->!waterhole&&&waterway->!culvert&&&waterway->!dam&&&waterway->!waterfall&&&waterway->!fish_pass&&&waterway->!dry_dock&&&waterway->!construction&&&waterway->!boat_lift&&&waterway->!weir&&&waterway->!breakwater&&&waterway->!boatyard||water->*&&water->!lock_gate&&&water->!dock&&&water->!water_point&&&water->!floodway&&&water->!spillway&&&water->!wastewater&&&water->!waterhole&&&water->!pool&&&water->!reflecting_pool&&&water->!swimming_pool&&&water->!salt_pool&&&water->!fountain&&&water->!tank&&&water->!fish_pass||tunnel->*&&tunnel->!culvert||waterway->*&&waterway->!drain&&name->!||water->*&&water->!drain&&name->!||wetland->*&&seasonal->yes&&wetland->!tidalflat&&&wetland->!reedbed||water->*&&seasonal->yes&&water->!tidalflat&&&water->!reedbed||natural->*&&seasonal->yes&&natural->!tidalflat&&&natural->!reedbed",
    "invalid.char.regex": ".*[0-9#$%^&*@~“”\"].*",
    "challenge": {
      "description": "Name and localized name tags for certain features should not contain invalid characters like numbers, special characters, double quotes or smart quotes.",
      "blurb": "Invalid characters in Name tags",
      "instruction": "Open your favorite editor and check the instruction for the task and then update the name or localized name tag accordingly.",
      "difficulty": "EASY",
      "defaultPriority": "MEDIUM"
    }
  }
}

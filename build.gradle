import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer



buildscript {
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.4.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        // Rio Addon
        classpath 'com.apple.cie.rio:gradle-build-plugin:latest.release'
    }
}

// Used to promote a staging release build
// https://github.com/Codearte/gradle-nexus-staging-plugin
// gradle closeAndReleaseRepository
plugins
{
  id 'java'
	id 'maven'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'
	id 'signing'
	id 'checkstyle'
	id 'jacoco'
	id "com.diffplug.gradle.spotless" version "3.18.0"
	id 'org.sonarqube' version '2.6.2'
	// id "io.codearte.nexus-staging" version "0.12.0"
	id 'com.github.johnrengelman.shadow' version '5.0.0'
}

apply from: 'dependencies.gradle'
apply from: 'gradle/quality.gradle'
apply from: 'gradle/deployment.gradle'
apply from: 'gradle/execute.gradle'

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'

// Rio addon
apply plugin: 'rio-library'

sourceCompatibility=1.8
targetCompatibility=1.8

repositories
{
    // For geotools
    maven { url "http://download.osgeo.org/webdav/geotools/" }
    mavenCentral()
    // For Spark CDH
    maven { url "https://repository.cloudera.com/content/repositories/releases/" }
    // For jetty (through spark)
    maven { url "http://repository.cloudera.com/cloudera/cloudera-repos/" }
    // For staged repositories (before they get to maven central)
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}

idea {
    project {
        languageLevel = '1.8'
    }
}

// corresponds to POM description
description = "Atlas Checks"

// This is to skip the tasks for which there is a skip<TaskName>=true environment variable
def skippedTaskNames = System.getenv().findAll { key, value ->
    key.startsWith("skip") && value.equalsIgnoreCase("true")
}.keySet().collect { it.substring(4) }

gradle.startParameter.excludedTaskNames += skippedTaskNames

checkstyle
{
    toolVersion = versions.checkstyle
}

sourceSets
{
    integrationTest
    {
        java
        {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

test
{
    testLogging
    {
        events "passed", "skipped", "failed"
    }
}

configurations
{
    compile
    {
        resolutionStrategy
        {
            force packages.atlas
            force packages.atlas_generator

            // Snappy 1.1.1.6 is the one that has the proper .so libs.
            // https://github.com/xerial/snappy-java/issues/6
            force 'org.xerial.snappy:snappy-java:1.1.1.6'

            // Force the version compatible with the latest version
            // of Spark brought in by atlas generator
            force 'com.fasterxml.jackson.core:jackson-core:2.9.8'
            force 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
        }
    }
    shaded
    {
        resolutionStrategy
        {
            force packages.atlas
            force packages.atlas_generator

            // Snappy 1.1.1.6 is the one that has the proper .so libs.
            // https://github.com/xerial/snappy-java/issues/6
            force 'org.xerial.snappy:snappy-java:1.1.1.6'

            // Force the version compatible with the latest version
            // of Spark brought in by atlas generator
            force 'com.fasterxml.jackson.core:jackson-core:2.9.8'
            force 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
        }
        // Hadoop and Spark are way too fat.
        exclude group: 'org.apache.hadoop'
        exclude group: 'org.apache.spark'
        exclude group: 'org.scala-lang'
        exclude group: 'org.slf4j'
    }
    runtime
    archives
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies
{
    compile packages.commons
    compile packages.atlas
    compile packages.atlas_generator

    checkstyle packages.checkstyle
    checkstyle packages.atlas_checkstyle

    shaded project.configurations.getByName('compile')
}


check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

/**
 * Artifact related items
 */
// task javadocJar(type: Jar) {
//     classifier = 'javadoc'
//     from javadoc
// }
//
// task sourcesJar(type: Jar) {
//     classifier = 'sources'
//     from sourceSets.main.allSource
// }

task shaded(type: Jar) {
    baseName = project.name
    classifier = 'shaded'
    from {
        configurations.shaded.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude {
                    it.path.contains('META-INF') && (it.path.endsWith('.SF') || it.path.endsWith('.DSA') || it.path.endsWith('.RSA'))
                }
            }
        }
    }
    with jar
    zip64 = true
}

shadowJar {
    baseName = project.name
    mergeServiceFiles()
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'reference.conf'
    }
    zip64 = true
}

// artifacts
// {
//     archives javadocJar, sourcesJar
// }

/**
 * Deployment related items
 */
import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}

// Rio addons
rio
{
    library
    { isPublic = true }
}

publish.dependsOn shaded
publish.dependsOn shadowJar

artifacts {
    archives shaded
    archives shadowJar
}

publishing.publications {
    rioLibrary(MavenPublication) {
        groupId project.group
        artifactId project.name
        artifact shaded {
            classifier "shaded"
        }
        artifact shadowJar {
            classifier "fat"
        }
    }
}
